{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3866368,"sourceType":"datasetVersion","datasetId":849073}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mehmettsaglam/cnn-img-classifier?scriptVersionId=264108083\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Gerekli kütüphaneleri içe aktaralım\nimport os\nimport shutil\nimport pathlib\nimport random\nimport time\nfrom collections import defaultdict\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.image as mpimg\nfrom PIL import Image\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# GPU kullanılabilirliğini kontrol edelim\nprint(\"TensorFlow sürümü:\", tf.__version__)\nprint(\"GPU kullanılabilir mi?\", \"Evet\" if tf.config.list_physical_devices('GPU') else \"Hayır\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-26T09:17:16.040748Z","iopub.execute_input":"2025-09-26T09:17:16.041418Z","iopub.status.idle":"2025-09-26T09:17:16.047485Z","shell.execute_reply.started":"2025-09-26T09:17:16.041393Z","shell.execute_reply":"2025-09-26T09:17:16.046896Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"****1. Veri Setini Yükleme ve Keşfetme****","metadata":{}},{"cell_type":"code","source":"# 1.1) Dataset kök yolu\nDATA_ROOT = \"/kaggle/input/fruit-recognition\"\n\n# 1.2) train/train – test/test gibi iç içe klasör varsa otomatik yakalayan fonksiyon\ndef resolve_dir(root, name):\n    p  = os.path.join(root, name)       # örn: /kaggle/input/fruit-recognition/train\n    pp = os.path.join(p, name)          # örn: /kaggle/input/fruit-recognition/train/train\n    return pp if os.path.isdir(pp) else p\n\nTRAIN_DIR = resolve_dir(DATA_ROOT, \"train\")\nTEST_DIR  = resolve_dir(DATA_ROOT, \"test\")\n\nprint(\"TRAIN_DIR:\", TRAIN_DIR)\nprint(\"TEST_DIR :\", TEST_DIR)\n\n# 1.3) Yapıyı gözle kontrol et (hata ayıklamada çok işe yarar)\ntrain_first10 = sorted(os.listdir(TRAIN_DIR))[:10]\ntest_first10  = sorted(os.listdir(TEST_DIR))[:10]\nprint(train_first10)\nprint(test_first10)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:20:13.416344Z","iopub.execute_input":"2025-09-26T08:20:13.416718Z","iopub.status.idle":"2025-09-26T08:20:13.531698Z","shell.execute_reply.started":"2025-09-26T08:20:13.416695Z","shell.execute_reply":"2025-09-26T08:20:13.531003Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# --- ADIM 1: clean_split klasörlerini oluştur ve doldur ---\n\nnp.random.seed(42)\n\n# 1) Kaynak klasörün varlığını teyit et\nprint(\"TRAIN_DIR =\", TRAIN_DIR)\nassert os.path.isdir(TRAIN_DIR), \"TRAIN_DIR bulunamadı!\"\n\n# 2) Çıkış klasörleri\nOUT = pathlib.Path(\"/kaggle/working/clean_split\")\nTR_DIR = OUT / \"train\"\nVA_DIR = OUT / \"val\"\n\n# Temiz başla\nif OUT.exists():\n    shutil.rmtree(OUT)\nTR_DIR.mkdir(parents=True, exist_ok=True)\nVA_DIR.mkdir(parents=True, exist_ok=True)\n\n# 3) Basit perceptual hash (aHash) — aynı/çok benzerleri grup yapacağız\nimport numpy as np\ndef average_hash(path, hash_size=8):\n    with Image.open(path) as im:\n        im = im.convert('L').resize((hash_size, hash_size), Image.BILINEAR)\n        arr = np.asarray(im, dtype=np.float32)\n    mean = arr.mean()\n    bits = (arr > mean).astype(np.uint8).flatten()\n    h = 0\n    for b in bits:\n        h = (h << 1) | int(b)\n    return h  # 64-bit int\n\nrng = np.random.default_rng(42)\nsplit_ratio = 0.2  # %20 validation\n\ntotal_train = total_val = 0\nclasses = [d for d in sorted(pathlib.Path(TRAIN_DIR).iterdir()) if d.is_dir()]\nprint(\"Sınıf sayısı:\", len(classes))\n\nfor cls_dir in classes:\n    cls_name = cls_dir.name\n    files = [p for p in cls_dir.iterdir() if p.is_file()]\n    if not files: \n        continue\n\n    # aHash ile grupla (aynı hash = çok benzer)\n    groups = {}\n    for fp in files:\n        try:\n            h = average_hash(fp)\n            groups.setdefault(h, []).append(fp)\n        except Exception:\n            pass\n\n    grp_list = list(groups.values())\n    rng.shuffle(grp_list)\n\n    n_total = sum(len(g) for g in grp_list)\n    target_val = int(round(split_ratio * n_total))\n    cur_val = 0\n    val_groups, train_groups = [], []\n    for g in grp_list:\n        if cur_val < target_val:\n            val_groups.append(g); cur_val += len(g)\n        else:\n            train_groups.append(g)\n\n    (TR_DIR/cls_name).mkdir(parents=True, exist_ok=True)\n    (VA_DIR/cls_name).mkdir(parents=True, exist_ok=True)\n    for g in train_groups:\n        for src in g:\n            shutil.copy2(src, TR_DIR/cls_name/src.name); total_train += 1\n    for g in val_groups:\n        for src in g:\n            shutil.copy2(src, VA_DIR/cls_name/src.name); total_val += 1\n\nprint(\"Yeni TRAIN:\", total_train, \" | Yeni VAL:\", total_val)\nprint(\"Klasörler hazır:\", str(TR_DIR), \"ve\", str(VA_DIR))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:20:16.167524Z","iopub.execute_input":"2025-09-26T08:20:16.168256Z","iopub.status.idle":"2025-09-26T08:24:01.821382Z","shell.execute_reply.started":"2025-09-26T08:20:16.16823Z","shell.execute_reply":"2025-09-26T08:24:01.820377Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"IMG_SIZE   = (100, 100)\nBATCH_SIZE = 32\nSEED       = 42\n\n# Ayrı klasörler (önce oluşturulmuş olmalı!)\nTR_DIR = \"/kaggle/working/clean_split/train\"\nVA_DIR = \"/kaggle/working/clean_split/val\"\n\ntrain_datagen = ImageDataGenerator(rescale=1./255)\nval_datagen   = ImageDataGenerator(rescale=1./255)\n\ntrain_gen = train_datagen.flow_from_directory(\n    TR_DIR,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode=\"categorical\",\n    shuffle=True,\n    seed=SEED\n)\n\nval_gen = val_datagen.flow_from_directory(\n    VA_DIR,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode=\"categorical\",\n    shuffle=False\n)\n\n# Test jeneratörü değişmeden kalıyor\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntest_gen = test_datagen.flow_from_directory(\n    TEST_DIR,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode=None,\n    shuffle=False,\n    classes=['.']\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:02.801773Z","iopub.execute_input":"2025-09-26T08:36:02.802079Z","iopub.status.idle":"2025-09-26T08:36:11.994647Z","shell.execute_reply.started":"2025-09-26T08:36:02.802058Z","shell.execute_reply":"2025-09-26T08:36:11.993728Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Train–Val dosya çakışması kontrol (0 olmalı)\noverlap = set(train_gen.filenames) & set(val_gen.filenames)\nprint(\"Overlap count:\", len(overlap))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:15.215587Z","iopub.execute_input":"2025-09-26T08:36:15.215893Z","iopub.status.idle":"2025-09-26T08:36:15.222316Z","shell.execute_reply.started":"2025-09-26T08:36:15.215868Z","shell.execute_reply":"2025-09-26T08:36:15.221686Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Eğitim verisi sayısı:\", train_gen.n)\nprint(\"Doğrulama verisi sayısı:\", val_gen.n)\nprint(\"Test verisi sayısı:\", test_gen.n)\n\nprint(\"Bir batch boyutu:\", train_gen.batch_size)\nprint(\"Görüntü boyutu:\", train_gen.image_shape)  # (100, 100, 3)\n\nprint(\"Sınıf sayısı:\", len(train_gen.class_indices))\nprint(\"Sınıf isimleri:\", list(train_gen.class_indices.keys()))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:17.884278Z","iopub.execute_input":"2025-09-26T08:36:17.88459Z","iopub.status.idle":"2025-09-26T08:36:17.88985Z","shell.execute_reply.started":"2025-09-26T08:36:17.884567Z","shell.execute_reply":"2025-09-26T08:36:17.889095Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Bir batch çekelim\nX_batch, y_batch = next(train_gen)\n\n# Sınıf isimlerini al\nclass_indices = train_gen.class_indices\nidx_to_class = {v: k for k, v in class_indices.items()}\n\n# 25 görüntü çizelim\nplt.figure(figsize=(10, 10))\nfor i in range(25):\n    plt.subplot(5, 5, i+1)\n    plt.imshow(X_batch[i])\n    label_index = np.argmax(y_batch[i])\n    plt.title(idx_to_class[label_index], fontsize=8)\n    plt.axis(\"off\")\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:20.844306Z","iopub.execute_input":"2025-09-26T08:36:20.844609Z","iopub.status.idle":"2025-09-26T08:36:22.811333Z","shell.execute_reply.started":"2025-09-26T08:36:20.844586Z","shell.execute_reply":"2025-09-26T08:36:22.810075Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"counts = {}\nfor class_name in os.listdir(TRAIN_DIR):\n    class_path = os.path.join(TRAIN_DIR, class_name)\n    if os.path.isdir(class_path):\n        counts[class_name] = len(os.listdir(class_path))\n\nplt.figure(figsize=(15,5))\nsns.barplot(x=list(counts.keys()), y=list(counts.values()))\nplt.xticks(rotation=90)\nplt.title(\"Eğitim Verisi Sınıf Dağılımı\")\nplt.xlabel(\"Sınıf\")\nplt.ylabel(\"Görüntü Sayısı\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:28.846338Z","iopub.execute_input":"2025-09-26T08:36:28.846696Z","iopub.status.idle":"2025-09-26T08:36:29.332487Z","shell.execute_reply.started":"2025-09-26T08:36:28.846672Z","shell.execute_reply":"2025-09-26T08:36:29.331802Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Normalizasyon kontrolü\nprint(\"Min piksel değeri:\", X_batch.min())\nprint(\"Max piksel değeri:\", X_batch.max())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:33.243244Z","iopub.execute_input":"2025-09-26T08:36:33.24371Z","iopub.status.idle":"2025-09-26T08:36:33.249645Z","shell.execute_reply.started":"2025-09-26T08:36:33.243688Z","shell.execute_reply":"2025-09-26T08:36:33.248899Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#One-hot encoding\nX_batch, y_batch = next(train_gen)\nprint(\"X_batch shape:\", X_batch.shape)   # (batch_size, 100, 100, 3)\nprint(\"y_batch shape:\", y_batch.shape)   # (batch_size, 33)\n\nprint(\"İlk örneğin etiketi (one-hot):\", y_batch[0])\nprint(\"En büyük index (sınıf):\", np.argmax(y_batch[0]))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:39.074267Z","iopub.execute_input":"2025-09-26T08:36:39.074581Z","iopub.status.idle":"2025-09-26T08:36:39.093401Z","shell.execute_reply.started":"2025-09-26T08:36:39.074559Z","shell.execute_reply":"2025-09-26T08:36:39.092687Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def create_cnn_model(num_classes, IMG_SIZE=(100,100)):\n    # --- Data Augmentation bloğu ---\n    data_augmentation = keras.Sequential([\n        layers.RandomFlip(\"horizontal\"),\n        layers.RandomRotation(0.05),\n        layers.RandomZoom(0.1),\n        layers.RandomContrast(0.1),\n    ])\n\n    # --- CNN modeli ---\n    model = keras.Sequential([\n        layers.Input(shape=IMG_SIZE + (3,)),\n        data_augmentation,   # ✅ augmentation en başta\n\n        # Blok 1\n        layers.Conv2D(32, (3,3), padding='same', use_bias=False),\n        layers.BatchNormalization(),\n        layers.Activation('relu'),\n        layers.Conv2D(32, (3,3), padding='same', use_bias=False),\n        layers.BatchNormalization(),\n        layers.Activation('relu'),\n        layers.MaxPooling2D((2,2)),\n        layers.Dropout(0.2),\n\n        # Blok 2\n        layers.Conv2D(64, (3,3), padding='same', use_bias=False),\n        layers.BatchNormalization(),\n        layers.Activation('relu'),\n        layers.Conv2D(64, (3,3), padding='same', use_bias=False),\n        layers.BatchNormalization(),\n        layers.Activation('relu'),\n        layers.MaxPooling2D((2,2)),\n        layers.Dropout(0.3),\n\n        # Blok 3\n        layers.Conv2D(128, (3,3), padding='same', use_bias=False),\n        layers.BatchNormalization(),\n        layers.Activation('relu'),\n        layers.Conv2D(128, (3,3), padding='same', use_bias=False),\n        layers.BatchNormalization(),\n        layers.Activation('relu'),\n        layers.MaxPooling2D((2,2)),\n        layers.Dropout(0.4),\n\n        # Sınıflandırıcı\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(128, activation='relu'),\n        layers.BatchNormalization(),\n        layers.Dropout(0.5),\n        layers.Dense(num_classes, activation='softmax'),\n    ])\n    return model\n\n\n# --- Modeli oluştur ---\nnum_classes = len(train_gen.class_indices)\nmodel = create_cnn_model(num_classes, IMG_SIZE=IMG_SIZE)\n\n# --- Derleme ---\nmodel.compile(\n    optimizer=\"adam\",\n    loss=\"categorical_crossentropy\",\n    metrics=[\"accuracy\"]\n)\n\n# --- Model özetini yazdır ---\nmodel.summary()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:36:43.913499Z","iopub.execute_input":"2025-09-26T08:36:43.914132Z","iopub.status.idle":"2025-09-26T08:36:46.710711Z","shell.execute_reply.started":"2025-09-26T08:36:43.914085Z","shell.execute_reply":"2025-09-26T08:36:46.710021Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# --- Callback'ler ---\nearly_stopping = keras.callbacks.EarlyStopping(\n    monitor=\"val_loss\",\n    patience=8,\n    restore_best_weights=True\n)\n\nreduce_lr = keras.callbacks.ReduceLROnPlateau(\n    monitor=\"val_loss\",\n    factor=0.2,\n    patience=4,\n    min_lr=1e-6\n)\n\n# (İsteğe bağlı) en iyi modeli kaydet\nckpt = keras.callbacks.ModelCheckpoint(\n    \"best_cnn.keras\",\n    monitor=\"val_loss\",\n    save_best_only=True\n)\n\n# --- Eğitim ---\nstart_time = time.time()\n\nhistory = model.fit(\n    train_gen,                      # ← generator\n    validation_data=val_gen,        # ← generator\n    epochs=5,\n    callbacks=[early_stopping, reduce_lr, ckpt],\n    verbose=1\n    # steps_per_epoch= train_gen.n // train_gen.batch_size,   # (opsiyonel)\n    # validation_steps= val_gen.n // val_gen.batch_size       # (opsiyonel)\n)\n\nprint(f\"Eğitim süresi: {time.time() - start_time:.2f} sn\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:37:18.426145Z","iopub.execute_input":"2025-09-26T08:37:18.426438Z","iopub.status.idle":"2025-09-26T08:39:50.382948Z","shell.execute_reply.started":"2025-09-26T08:37:18.426418Z","shell.execute_reply":"2025-09-26T08:39:50.382319Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_probs = model.predict(test_gen, verbose=1)\nprint(\"Test set tahmin boyutu:\", test_probs.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:39:53.095989Z","iopub.execute_input":"2025-09-26T08:39:53.096591Z","iopub.status.idle":"2025-09-26T08:40:44.396118Z","shell.execute_reply.started":"2025-09-26T08:39:53.096566Z","shell.execute_reply":"2025-09-26T08:40:44.395463Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# --- 1) Test seti tahminleri ---\ntest_probs = model.predict(test_gen, verbose=1)\ntest_pred_classes = test_probs.argmax(axis=1)\n\n# --- 2) Index -> sınıf adı map ---\nidx_to_class = {v:k for k,v in train_gen.class_indices.items()}\nclass_names = [idx_to_class[i] for i in range(len(idx_to_class))]\n\n# --- 3) Görselleştirme ---\nplt.figure(figsize=(15, 10))\n\nfor i in range(20):   # ilk 20 test örneği\n    plt.subplot(4, 5, i+1)\n    img = mpimg.imread(test_gen.filepaths[i])\n    plt.imshow(img)\n    pred_class = class_names[test_pred_classes[i]]\n    plt.title(f\"Tahmin: {pred_class}\", fontsize=8)\n    plt.axis(\"off\")\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:45:14.107132Z","iopub.execute_input":"2025-09-26T08:45:14.107877Z","iopub.status.idle":"2025-09-26T08:45:27.933061Z","shell.execute_reply.started":"2025-09-26T08:45:14.107843Z","shell.execute_reply":"2025-09-26T08:45:27.931892Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Eğitim ve doğrulama kaybı/doğruluğunu görselleştirelim\nplt.figure(figsize=(12, 4))\n\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Eğitim Doğruluğu')\nplt.plot(history.history['val_accuracy'], label='Doğrulama Doğruluğu')\nplt.title('Model Doğruluğu')\nplt.xlabel('Epoch')\nplt.ylabel('Doğruluk')\nplt.legend()\nplt.grid(True)\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Eğitim Kaybı')\nplt.plot(history.history['val_loss'], label='Doğrulama Kaybı')\nplt.title('Model Kaybı')\nplt.xlabel('Epoch')\nplt.ylabel('Kayıp')\nplt.legend()\nplt.grid(True)\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:50:33.673398Z","iopub.execute_input":"2025-09-26T08:50:33.674102Z","iopub.status.idle":"2025-09-26T08:50:34.09561Z","shell.execute_reply.started":"2025-09-26T08:50:33.674068Z","shell.execute_reply":"2025-09-26T08:50:34.094816Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 1) Sınıf adları (index -> isim)\nidx_to_class = {v: k for k, v in train_gen.class_indices.items()}\nclass_names  = [idx_to_class[i] for i in range(len(idx_to_class))]\n\n# 2) Doğrulama setinde gerçek etiketler (shuffle=False olmalıydı!)\ny_true = val_gen.classes                           # (N,)\n\n# 3) Doğrulama seti tahminleri\nval_probs = model.predict(val_gen, verbose=1)\ny_pred_classes = val_probs.argmax(axis=1)          # (N,)\n\n# 4) Sınıflandırma raporu\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(\"\\nSınıflandırma Raporu:\")\nprint(classification_report(y_true, y_pred_classes, target_names=class_names, digits=4))\n\n# 5) Karmaşıklık matrisi (confusion matrix)\ncm = confusion_matrix(y_true, y_pred_classes)      # istersen normalize='true'\nplt.figure(figsize=(12, 10))\nsns.heatmap(cm, annot=True, fmt=\"d\", cmap='Blues',\n            xticklabels=class_names, yticklabels=class_names)\nplt.title('Karmaşıklık Matrisi (Validation)')\nplt.ylabel('Gerçek Etiket')\nplt.xlabel('Tahmin Edilen Etiket')\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:50:37.639487Z","iopub.execute_input":"2025-09-26T08:50:37.640104Z","iopub.status.idle":"2025-09-26T08:50:42.542327Z","shell.execute_reply.started":"2025-09-26T08:50:37.640079Z","shell.execute_reply":"2025-09-26T08:50:42.541526Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rng = np.random.default_rng(123)\n\n# --- Tahminler ---\nval_probs = model.predict(val_gen, verbose=0)\ny_pred = val_probs.argmax(axis=1)\ny_true = val_gen.classes\n\nidx_to_class = {v:k for k,v in train_gen.class_indices.items()}\nclass_names  = [idx_to_class[i] for i in range(len(idx_to_class))]\n\ncorrect_idx   = np.where(y_pred == y_true)[0]\nincorrect_idx = np.where(y_pred != y_true)[0]\n\n# --- Yardımcı: sınıf bazlı örnek seç (her sınıftan en fazla 1) ---\ndef pick_one_per_class(indices, y_labels, max_total):\n    by_cls = defaultdict(list)\n    for idx in indices:\n        by_cls[y_labels[idx]].append(idx)\n    # her sınıftan 1 örnek (varsa)\n    picked = []\n    for c in range(len(class_names)):\n        if by_cls[c]:\n            rng.shuffle(by_cls[c])\n            picked.append(by_cls[c][0])\n            if len(picked) >= max_total:\n                break\n    # halen eksik kaldıysa rastgele tamamla\n    if len(picked) < max_total:\n        remain = [i for i in indices if i not in picked]\n        rng.shuffle(remain)\n        picked.extend(remain[: max_total - len(picked)])\n    return picked[:max_total]\n\n# Kaç görsel göstereceğiz?\nN_CORRECT = 4\nN_INCORR  = 4\n\nshow_correct = pick_one_per_class(correct_idx, y_true, N_CORRECT)\nshow_incorrect = pick_one_per_class(incorrect_idx, y_true, N_INCORR)\n\nplt.figure(figsize=(12, 8))\n\n# Doğru tahmin örnekleri (çeşitli sınıflardan)\nfor i, idx in enumerate(show_correct):\n    plt.subplot(2, 4, i+1)\n    img = mpimg.imread(val_gen.filepaths[idx])\n    plt.imshow(img)\n    plt.title(f\"Doğru ✅\\nGerçek: {class_names[y_true[idx]]}\\nTahmin: {class_names[y_pred[idx]]}\", fontsize=8)\n    plt.axis(\"off\")\n\n# Yanlış tahmin örnekleri (çeşitli sınıflardan)\nfor i, idx in enumerate(show_incorrect):\n    plt.subplot(2, 4, i+5)\n    img = mpimg.imread(val_gen.filepaths[idx])\n    plt.imshow(img)\n    plt.title(f\"Yanlış ❌\\nGerçek: {class_names[y_true[idx]]}\\nTahmin: {class_names[y_pred[idx]]}\", fontsize=8)\n    plt.axis(\"off\")\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:50:45.572933Z","iopub.execute_input":"2025-09-26T08:50:45.573477Z","iopub.status.idle":"2025-09-26T08:50:47.925256Z","shell.execute_reply.started":"2025-09-26T08:50:45.573453Z","shell.execute_reply":"2025-09-26T08:50:47.924589Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Toplam doğrulama örneği:\", len(y_true))\nprint(\"Doğru tahmin sayısı:\", len(correct_idx))\nprint(\"Yanlış tahmin sayısı:\", len(incorrect_idx))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:50:52.094494Z","iopub.execute_input":"2025-09-26T08:50:52.095259Z","iopub.status.idle":"2025-09-26T08:50:52.100074Z","shell.execute_reply.started":"2025-09-26T08:50:52.095234Z","shell.execute_reply":"2025-09-26T08:50:52.099172Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Train–Val overlap (0 olmalı)\noverlap = set(train_gen.filepaths) & set(val_gen.filepaths)\nprint(\"Overlap count:\", len(overlap))\n\n# eval ve basit sayaç\nval_metrics = model.evaluate(val_gen, verbose=0)\nprint(\"Val (generator) loss/acc:\", val_metrics)\n\nval_probs = model.predict(val_gen, verbose=0)\ny_pred = val_probs.argmax(axis=1)\ny_true = val_gen.classes\nprint(\"Toplam:\", len(y_true), \"| Doğru:\", (y_pred == y_true).sum(), \"| Yanlış:\", (y_pred != y_true).sum())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:50:54.679821Z","iopub.execute_input":"2025-09-26T08:50:54.680395Z","iopub.status.idle":"2025-09-26T08:50:58.507247Z","shell.execute_reply.started":"2025-09-26T08:50:54.680371Z","shell.execute_reply":"2025-09-26T08:50:58.506523Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ====== 1) VGG16 için DataGenerator (doğru preprocessing) ======\n# IMG_SIZE, BATCH_SIZE, SEED, TR_DIR, VA_DIR önceden tanımlı olmalı\n\ntrain_datagen_tl = ImageDataGenerator(\n    preprocessing_function=preprocess_input,\n    horizontal_flip=True,\n    rotation_range=10,\n    width_shift_range=0.05,\n    height_shift_range=0.05,\n    zoom_range=0.1\n)\nval_datagen_tl = ImageDataGenerator(\n    preprocessing_function=preprocess_input\n)\n\ntrain_gen_tl = train_datagen_tl.flow_from_directory(\n    TR_DIR,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode=\"categorical\",\n    shuffle=True,\n    seed=SEED\n)\nval_gen_tl = val_datagen_tl.flow_from_directory(\n    VA_DIR,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode=\"categorical\",\n    shuffle=False\n)\n\nnum_classes = len(train_gen_tl.class_indices)\nprint(\"Sınıf sayısı:\", num_classes)\n\n# ====== 2) Model (VGG16 tabanı donuk) ======\nbase_model = VGG16(weights=\"imagenet\", include_top=False, input_shape=IMG_SIZE + (3,))\nfor layer in base_model.layers:\n    layer.trainable = False  # tabanı dondur\n\ntransfer_model = keras.Sequential([\n    base_model,\n    layers.GlobalAveragePooling2D(),\n    layers.Dense(256, activation=\"relu\"),\n    layers.Dropout(0.5),\n    layers.Dense(num_classes, activation=\"softmax\")\n])\n\ntransfer_model.compile(\n    optimizer=keras.optimizers.Adam(learning_rate=1e-3),\n    loss=\"categorical_crossentropy\",\n    metrics=[\"accuracy\"]\n)\n\ntransfer_model.summary()\n\n# ====== 3) Callback'ler ======\nearly_stopping = keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=6, restore_best_weights=True)\nreduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\", factor=0.2, patience=3, min_lr=1e-6)\nckpt = keras.callbacks.ModelCheckpoint(\"best_vgg16.keras\", monitor=\"val_loss\", save_best_only=True)\n\n# ====== 4) Tek aşamalı eğitim ======\nhistory_tl = transfer_model.fit(\n    train_gen_tl,\n    validation_data=val_gen_tl,\n    epochs=5,                    # EarlyStopping olduğu için daha erken durabilir\n    callbacks=[early_stopping, reduce_lr, ckpt],\n    verbose=1\n)\n\n# ====== 5) Değerlendirme ======\nval_probs = transfer_model.predict(val_gen_tl, verbose=0)\ny_pred = val_probs.argmax(axis=1)\ny_true = val_gen_tl.classes\n\nidx_to_class = {v:k for k,v in train_gen_tl.class_indices.items()}\nclass_names = [idx_to_class[i] for i in range(len(idx_to_class))]\n\nprint(\"\\nTransfer Learning – Sınıflandırma Raporu:\")\nprint(classification_report(y_true, y_pred, target_names=class_names, digits=4))\n\ncm = confusion_matrix(y_true, y_pred)\nplt.figure(figsize=(12,10))\nsns.heatmap(cm, annot=True, fmt=\"d\", xticklabels=class_names, yticklabels=class_names)\nplt.title(\"VGG16 Transfer – Confusion Matrix (Val)\")\nplt.ylabel(\"Gerçek\"); plt.xlabel(\"Tahmin\"); plt.tight_layout(); plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:50:58.508499Z","iopub.execute_input":"2025-09-26T08:50:58.508773Z","iopub.status.idle":"2025-09-26T08:55:01.124253Z","shell.execute_reply.started":"2025-09-26T08:50:58.508756Z","shell.execute_reply":"2025-09-26T08:55:01.123434Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# ====== 1) Temel CNN ve Transfer Learning performans karşılaştırması ======\nval_loss_cnn,  val_acc_cnn  = model.evaluate(val_gen,    verbose=0)\nval_loss_tl,   val_acc_tl   = transfer_model.evaluate(val_gen_tl, verbose=0)\n\nprint(f\"Temel CNN  - Val Acc: {val_acc_cnn:.4f}\")\nprint(f\"Transfer   - Val Acc: {val_acc_tl:.4f}\")\n\nmodels = ['Temel CNN', 'Transfer Learning']\naccuracies = [val_acc_cnn, val_acc_tl]\n\nplt.figure(figsize=(8, 6))\nbars = plt.bar(models, accuracies, color=['blue', 'orange'])\nplt.title('Model Performans Karşılaştırması (Validation)')\nplt.ylabel('Doğruluk')\nplt.ylim(0, 1)\n\nfor bar, acc in zip(bars, accuracies):\n    plt.text(bar.get_x() + bar.get_width()/2,\n             bar.get_height() + 0.01,\n             f'{acc:.4f}', ha='center', va='bottom')\nplt.show()\n\n\n# ====== 2) Öznitelik (aktivasyon) haritalarını görselleştirme ======\n# CNN modelinden ilk conv katmanlarının çıktısını alalım\nconv_layers = [layer.output for layer in model.layers if isinstance(layer, keras.layers.Conv2D)]\nactivation_model = keras.Model(inputs=model.input, outputs=conv_layers)\n\n# Validation setten rastgele bir resim al\nval_gen.reset()\nbatch_x, batch_y = next(val_gen)\nimg = batch_x[0:1]   # tek resim (1, H, W, 3)\n\n# Aktivasyonları hesapla\nactivations = activation_model.predict(img, verbose=0)\nlayer_names = [layer.name for layer in model.layers if isinstance(layer, keras.layers.Conv2D)]\n\n# Her conv katmandan en fazla 16 filtreyi çiz\nfor layer_name, layer_activation in zip(layer_names, activations):\n    n_filters = min(layer_activation.shape[-1], 16)\n    n_cols = 8\n    n_rows = int(np.ceil(n_filters / n_cols))\n\n    plt.figure(figsize=(n_cols*2, n_rows*2))\n    plt.suptitle(f\"Aktivasyon Haritası - {layer_name}\")\n    for i in range(n_filters):\n        plt.subplot(n_rows, n_cols, i+1)\n        plt.imshow(layer_activation[0, :, :, i], cmap='viridis')\n        plt.axis(\"off\")\n    plt.tight_layout()\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:07:24.620525Z","iopub.execute_input":"2025-09-26T08:07:24.620789Z","iopub.status.idle":"2025-09-26T08:07:33.386963Z","shell.execute_reply.started":"2025-09-26T08:07:24.620769Z","shell.execute_reply":"2025-09-26T08:07:33.386009Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Güvenlik: callback'ler yukarıda tanımlı değilse hızlı tanım yap\nif 'early_stopping' not in globals():\n    early_stopping = keras.callbacks.EarlyStopping(\n        monitor=\"val_loss\", patience=6, restore_best_weights=True\n    )\nif 'reduce_lr' not in globals():\n    reduce_lr = keras.callbacks.ReduceLROnPlateau(\n        monitor=\"val_loss\", factor=0.2, patience=3, min_lr=1e-6\n    )\n\n# Sınıf sayısı ve IMG_SIZE mevcut pipeline'dan\nnum_classes = len(train_gen.class_indices)\n# IMG_SIZE zaten yukarıda kullanılıyor; emin olmak için alalım:\nIMG_SIZE = train_gen.image_shape[:2]\n\noptimizers = {\n    'Adam': keras.optimizers.Adam(learning_rate=1e-3),\n    'RMSprop': keras.optimizers.RMSprop(learning_rate=1e-3),\n    'SGD (mom=0.9, lr=0.01)': keras.optimizers.SGD(learning_rate=1e-2, momentum=0.9)\n}\n\nresults = {}\nhistories = {}\n\n# (Opsiyonel) class_weight — dengesizlik varsa adil karşılaştırma için eklemek iyi olur\ntry:\n    from collections import Counter\n    cls_counts = Counter(train_gen.classes)\n    max_count = max(cls_counts.values())\n    class_weight = {cls: max_count / cnt for cls, cnt in cls_counts.items()}\nexcept Exception:\n    class_weight = None\n\nfor run_idx, (opt_name, optimizer) in enumerate(optimizers.items(), start=1):\n    print(f\"\\n[{opt_name}] optimizer ile eğitim başlıyor...\")\n\n    # Adil/tekrarlanabilir deneme: seed ve session reset\n    os.environ[\"PYTHONHASHSEED\"] = \"42\"\n    random.seed(42)\n    np.random.seed(42)\n    tf.random.set_seed(42 + run_idx)   # her optimizer için farklı ama deterministik\n\n    K.clear_session()\n\n    # Modeli sıfırdan kur\n    model_opt = create_cnn_model(num_classes=num_classes, IMG_SIZE=IMG_SIZE)\n    model_opt.compile(optimizer=optimizer,\n                      loss='categorical_crossentropy',\n                      metrics=['accuracy'])\n\n    # Generator'ları başa sar\n    train_gen.reset()\n    val_gen.reset()\n\n    # Checkpoint ismi optimizer'a özel olsun (overwrite olmasın)\n    ckpt_opt = keras.callbacks.ModelCheckpoint(\n        filepath=f\"best_cnn_{opt_name.replace(' ', '_').replace('(', '').replace(')', '').replace(',', '')}.keras\",\n        monitor=\"val_loss\",\n        save_best_only=True\n    )\n\n    # Eğit\n    history_opt = model_opt.fit(\n        train_gen,\n        validation_data=val_gen,\n        epochs=3,                        # EarlyStopping var, 30 yaz ve bırak\n        callbacks=[early_stopping, reduce_lr, ckpt_opt],\n        class_weight=class_weight,        # yoksa None; Keras bunu yok sayar\n        verbose=1\n    )\n\n    # Değerlendir (validation üzerinde net ölçüm)\n    val_loss, val_acc = model_opt.evaluate(val_gen, verbose=0)\n    results[opt_name] = float(val_acc)\n    histories[opt_name] = history_opt.history\n    print(f\"[{opt_name}] Val Doğruluğu: {val_acc:.4f}\")\n\n# Sonuçları çiz\nplt.figure(figsize=(9, 6))\nbars = plt.bar(list(results.keys()), list(results.values()))\nplt.title('Optimizasyon Teknikleri Karşılaştırması (Validation)')\nplt.ylabel('Doğruluk')\nplt.ylim(0, 1)\n\nfor bar, accuracy in zip(bars, results.values()):\n    plt.text(bar.get_x() + bar.get_width()/2,\n             bar.get_height() + 0.01,\n             f'{accuracy:.4f}', ha='center', va='bottom', fontsize=10)\nplt.xticks(rotation=10)\nplt.tight_layout()\nplt.show()\n\n# (Opsiyonel) En iyiyi yazdır\nbest_opt = max(results, key=results.get)\nprint(f\"\\nEn iyi optimizer: {best_opt} | Val Acc = {results[best_opt]:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-26T08:58:03.288897Z","iopub.execute_input":"2025-09-26T08:58:03.289184Z","iopub.status.idle":"2025-09-26T09:02:41.36136Z","shell.execute_reply.started":"2025-09-26T08:58:03.289163Z","shell.execute_reply":"2025-09-26T09:02:41.360517Z"}},"outputs":[],"execution_count":null}]}